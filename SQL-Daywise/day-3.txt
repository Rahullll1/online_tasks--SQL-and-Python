-- Raising Temperature --> https://leetcode.com/problems/rising-temperature/
SELECT w1.id 
FROM Weather w1
JOIN Weather w2 
ON DATEDIFF(w1.recordDate, w2.recordDate) = 1
WHERE w1.temperature > w2.temperature;

-- Write a query to find the first login date for each player. --> https://leetcode.com/problems/game-play-analysis-i/description/
SELECT player_id, MIN(event_date) AS first_login
FROM Activity
GROUP BY player_id;

-- Second Highest Salary  --> https://leetcode.com/problems/second-highest-salary/description/
SELECT (
  SELECT DISTINCT salary
  FROM Employee
  ORDER BY salary DESC
  LIMIT 1 OFFSET 1
) AS SecondHighestSalary;

-- movie Rating --> 
# Write your MySQL query statement below
with n1 as (
    select name,count(*) from movierating mr
    join users u
    on u.user_id = mr.user_id
    group by mr.user_id
    order by 2 desc, 1
    limit 1
), 
n2 as (
    select title, avg(mr.rating) from movierating mr
    join movies m
    on m.movie_id = mr.movie_id
    where month(created_at) = '02' and year(created_at) = '2020'
    group by mr.movie_id
    order by 2 desc, 1
    limit 1)
select name as results from n1
union all
select title as results from n2;

-- Delete Duplicate Emails --> https://leetcode.com/problems/delete-duplicate-emails/description/
Delete FROM Person p
USING Person d
WHERE p.email = d.email
AND p.id > d.id;
  
-- Human Traffic of Stadium -->https://leetcode.com/problems/human-traffic-of-stadium/description/
    
with q1 as (
select *, 
     count(*) over( order by id range between current row and 2 following ) following_cnt,
     count(*) over( order by id range between 2 preceding and current row ) preceding_cnt,
     count(*) over( order by id range between 1 preceding and 1 following ) current_cnt
from stadium
where people > 99
)
select id, visit_date, people
from q1
where following_cnt = 3 or preceding_cnt = 3 or current_cnt = 3
order by visit_date;

--  Customers Who Bought All Products --> https://leetcode.com/problems/customers-who-bought-all-products/description/

SELECT  customer_id FROM Customer GROUP BY customer_id
HAVING COUNT(distinct product_key) = (SELECT COUNT(product_key) FROM Product)