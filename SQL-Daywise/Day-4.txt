create database group_org;

use group_org;

CREATE TABLE employees (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR(50),
    dept_id INT,
    salary INT,
    hire_date DATE
);

INSERT INTO employees (emp_id, emp_name, dept_id, salary, hire_date) VALUES
(1, 'Alice', 10, 60000, '2020-01-15'),
(2, 'Bob', 20, 75000, '2019-03-10'),
(3, 'Charlie', 10, 55000, '2021-06-20'),
(4, 'Dave', 20, 80000, '2018-09-05'),
(5, 'Eve', 30, 50000, '2022-02-10');

select * from employees;
CREATE TABLE departments (
    dept_id INT PRIMARY KEY,
    dept_name VARCHAR(50),
    location VARCHAR(50)
);

INSERT INTO departments (dept_id, dept_name, location) VALUES
(10, 'HR', 'New York'),
(20, 'IT', 'Boston'),
(30, 'Finance', 'Chicago');


select * from departments;

CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    emp_id INT,
    project_name VARCHAR(50),
    start_date DATE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
);

INSERT INTO projects (project_id, emp_id, project_name, start_date) VALUES
(101, 1, 'Project A', '2023-01-01'),
(102, 2, 'Project B', '2023-02-15'),
(103, 1, 'Project C', '2023-03-10'),
(104, 3, 'Project D', '2023-04-01');

select * from projects;
-- WAQ to fecth Employees Earning More Than Their Departmentâ€™s Average Salary
SELECT e.emp_id, e.emp_name, e.salary, e.dept_id
FROM employees e
JOIN (
    SELECT dept_id, AVG(salary) AS avg_salary
    FROM employees
    GROUP BY dept_id
) d_avg ON e.dept_id = d_avg.dept_id
WHERE e.salary > d_avg.avg_salary;

-- WAQ to Find Employees Who Worked on All Projects in Their Department
SELECT e.emp_id, e.emp_name
FROM employees e
WHERE NOT EXISTS (
    SELECT 1
    FROM projects p
    JOIN employees e2 ON p.emp_id = e2.emp_id
    WHERE e2.dept_id = e.dept_id
    AND NOT EXISTS (
        SELECT 1
        FROM projects p2
        WHERE p2.project_id = p.project_id
        AND p2.emp_id = e.emp_id
    )
);

-- WAQ to Find the Highest-Paid Employee in Each Department Who Started After 2020
SELECT e.dept_id, e.emp_id, e.emp_name, e.salary
FROM employees e
WHERE e.hire_date > '2020-12-31'
AND salary = (
    SELECT MAX(salary)
    FROM employees e2
    WHERE e2.dept_id = e.dept_id AND e2.hire_date > '2020-12-31'
);

-- WAQ to Find Departments Where All Employees Earn Above a Certain Threshold
SELECT d.dept_id, d.dept_name
FROM departments d
WHERE NOT EXISTS (
    SELECT 1
    FROM employees e
    WHERE e.dept_id = d.dept_id AND e.salary <= 55000
);

CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10,2)
);

INSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES
(1, 101, '2023-01-10', 500.00),
(2, 102, '2023-02-15', 300.00),
(3, 101, '2023-03-01', 700.00),
(4, 103, '2023-04-20', 450.00),
(5, 102, '2023-05-10', 200.00);

CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(50),
    region VARCHAR(50)
);

INSERT INTO customers (customer_id, customer_name, region) VALUES
(101, 'Alice', 'East'),
(102, 'Bob', 'West'),
(103, 'Charlie', 'North'),
(104, 'Dave', 'South');

CREATE TABLE order_details (
    detail_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    unit_price DECIMAL(10,2),
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
);

INSERT INTO order_details (detail_id, order_id, product_id, quantity, unit_price) VALUES
(1, 1, 201, 2, 200.00),
(2, 1, 202, 1, 100.00),
(3, 2, 203, 3, 100.00),
(4, 3, 201, 1, 700.00),
(5, 4, 202, 2, 225.00);

CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(50),
    category VARCHAR(50)
);

INSERT INTO products (product_id, product_name, category) VALUES
(201, 'Laptop', 'Electronics'),
(202, 'Mouse', 'Accessories'),
(203, 'Headphones', 'Accessories');

-- WAQ to Find Customers Whose Total Order Amount Exceeds the Average Order Amount in Their Region

SELECT c.customer_id, c.customer_name, c.region
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.customer_name, c.region
HAVING SUM(o.total_amount) > (
    SELECT AVG(total_amount)
    FROM orders o2
    JOIN customers c2 ON o2.customer_id = c2.customer_id
    WHERE c2.region = c.region
);

-- WAQ TO Find Orders Containing Products from All Categories
SELECT od.order_id
FROM order_details od
JOIN products p ON od.product_id = p.product_id
GROUP BY od.order_id
HAVING COUNT(DISTINCT p.category) = (
    SELECT COUNT(DISTINCT category) FROM products
);

-- WAQ To Find the Most Expensive Product Ordered by Each Customer After a Specific Date (e.g., '2023-01-01')
SELECT o.customer_id, c.customer_name, od.product_id, p.product_name, MAX(od.unit_price) AS max_price
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
JOIN order_details od ON o.order_id = od.order_id
JOIN products p ON od.product_id = p.product_id
WHERE o.order_date > '2023-01-01'
GROUP BY o.customer_id, c.customer_name;

-- WAQ To Find Regions Where No Customer Ordered a Specific Product (e.g., product_id = 201)
SELECT DISTINCT c.region
FROM customers c
WHERE c.customer_id NOT IN (
    SELECT o.customer_id
    FROM orders o
    JOIN order_details od ON o.order_id = od.order_id
    WHERE od.product_id = 201
);